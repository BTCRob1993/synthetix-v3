# overrides to create a testable deployment of the core system
version = "<%= package.version %>-testable"
include = ["cannonfile.toml"]

# use the testable oracle manager
[setting.oracle_manager_source]
defaultValue = "oracle-manager:<%= package.version %>-testable"

# Test Modules
[contract.TestableAccountStorage]
artifact = "contracts/generated/test/TestableAccountStorage.sol:TestableAccountStorage"

[contract.TestableAccountRBACStorage]
artifact = "contracts/generated/test/TestableAccountRBACStorage.sol:TestableAccountRBACStorage"

[contract.TestableCollateralStorage]
artifact = "contracts/generated/test/TestableCollateralStorage.sol:TestableCollateralStorage"

[contract.TestableCollateralConfigurationStorage]
artifact = "contracts/generated/test/TestableCollateralConfigurationStorage.sol:TestableCollateralConfigurationStorage"

[contract.TestableCollateralLockStorage]
artifact = "contracts/generated/test/TestableCollateralLockStorage.sol:TestableCollateralLockStorage"

[contract.TestableCrossChainChainlinkStorage]
artifact = "contracts/generated/test/TestableCrossChainChainlinkStorage.sol:TestableCrossChainChainlinkStorage"

[contract.TestableCrossChainWormholeStorage]
artifact = "contracts/generated/test/TestableCrossChainWormholeStorage.sol:TestableCrossChainWormholeStorage"

[contract.TestableDistributionStorage]
artifact = "contracts/generated/test/TestableDistributionStorage.sol:TestableDistributionStorage"

[contract.TestableDistributionActorStorage]
artifact = "contracts/generated/test/TestableDistributionActorStorage.sol:TestableDistributionActorStorage"

[contract.TestableMarketStorage]
artifact = "contracts/generated/test/TestableMarketStorage.sol:TestableMarketStorage"

[contract.TestableMarketConfigurationStorage]
artifact = "contracts/generated/test/TestableMarketConfigurationStorage.sol:TestableMarketConfigurationStorage"

[contract.TestableMarketPoolInfoStorage]
artifact = "contracts/generated/test/TestableMarketPoolInfoStorage.sol:TestableMarketPoolInfoStorage"

[contract.TestablePoolStorage]
artifact = "contracts/generated/test/TestablePoolStorage.sol:TestablePoolStorage"

[contract.TestableSystemPoolConfigurationStorage]
artifact = "contracts/generated/test/TestableSystemPoolConfigurationStorage.sol:TestableSystemPoolConfigurationStorage"

[contract.TestableRewardDistributionStorage]
artifact = "contracts/generated/test/TestableRewardDistributionStorage.sol:TestableRewardDistributionStorage"

[contract.TestableRewardDistributionClaimStatusStorage]
artifact = "contracts/generated/test/TestableRewardDistributionClaimStatusStorage.sol:TestableRewardDistributionClaimStatusStorage"

[contract.TestableScalableMappingStorage]
artifact = "contracts/generated/test/TestableScalableMappingStorage.sol:TestableScalableMappingStorage"

[contract.TestableVaultEpochStorage]
artifact = "contracts/generated/test/TestableVaultEpochStorage.sol:TestableVaultEpochStorage"

[contract.TestableVaultStorage]
artifact = "contracts/generated/test/TestableVaultStorage.sol:TestableVaultStorage"

[contract.CallSelfModule]
artifact = "contracts/mocks/CallSelfModule.sol:CallSelfModule"

[contract.FakeSendCrossChainModule]
artifact = "contracts/mocks/FakeSendCrossChainModule.sol:FakeSendCrossChainModule"

# Core
[router.CoreRouter]
contracts = [
    "InitialModuleBundle",
    "FeatureFlagModule",
    "AccountModule",
    "AssociateDebtModule",
    "AssociatedSystemsModule",
    "OffchainChainlinkModule",
    "OffchainWormholeModule",
    "CollateralModule",
    "CollateralConfigurationModule",
    "CrossChainPoolModule",
    "CrossChainUpkeepModule",
    "CrossChainUSDModule",
    "IssueUSDModule",
    "LiquidationModule",
    "MarketCollateralModule",
    "MarketManagerModule",
    "MulticallModule",
    "PoolConfigurationModule",
    "PoolModule",
    "RewardsManagerModule",
    "UtilsModule",
    "VaultModule",
    "CallSelfModule",
    "FakeSendCrossChainModule",
    "TestableAccountStorage",
    "TestableAccountRBACStorage",
    "TestableCollateralStorage",
    "TestableCollateralConfigurationStorage",
    "TestableCollateralLockStorage",
    "TestableCrossChainChainlinkStorage",
    "TestableCrossChainWormholeStorage",
    "TestableDistributionStorage",
    "TestableDistributionActorStorage",
    "TestableMarketStorage",
    "TestableMarketConfigurationStorage",
    "TestablePoolStorage",
    "TestableSystemPoolConfigurationStorage",
    "TestableRewardDistributionStorage",
    "TestableRewardDistributionClaimStatusStorage",
    "TestableScalableMappingStorage",
    "TestableVaultEpochStorage",
    "TestableVaultStorage",
]

# Post stuff
[contract.CollateralMock]
artifact = "contracts/mocks/CollateralMock.sol:CollateralMock"

[contract.Collateral2Mock]
artifact = "contracts/mocks/CollateralMock.sol:CollateralMock"
salt = "2"

[invoke.intializeCollateralMock]
target = ["CollateralMock"]
func = "initialize"
args = ["SampleToken", "TKN", "18"]

[invoke.enableAllFeatures]
target = ["CoreProxy"]
fromCall.func = "owner"
func = "multicall"
args = [
    [
        # for all the below functions, "0x7d632bd2" is the selector for "setFeatureFlagAllowAll(bytes32,bool)"
        "0x7d632bd2<%= defaultAbiCoder.encode(['bytes32', 'bool'], [formatBytes32String('registerMarket'), true]).slice(2) %>",
        "0x7d632bd2<%= defaultAbiCoder.encode(['bytes32', 'bool'], [formatBytes32String('createPool'), true]).slice(2) %>",
    ]
]

[invoke.set_cross_chain_selectors_dummy]
target = ["CoreProxy"]
fromCall.func = "owner"
func = "multicall"
args = [
    [
        # for all the below functions, the selector is for "setConfig(bytes32,bytes32)"
        "0xd1fd27b3<%= defaultAbiCoder.encode(['bytes32', 'bytes32'], [keccak256(defaultAbiCoder.encode(['bytes32', 'bytes4'], [formatBytes32String('crossChainWriteSelector'), '0xea7a2248'])), formatBytes32String('TRUE')]).slice(2) %>",
    ]
]

# cross chain wormhole
[import.wormhole]
source = "erc7412-wormhole:latest"

[invoke.configureWormholeCrossChain]
target = ["CoreProxy"]
fromCall.func = "owner"
func = "configureWormholeCrossChain"
args = [
    "<%= imports.wormhole.imports.wormhole.contracts.Wormhole.address %>",
    "<%= imports.wormhole.imports.wormhole.contracts.Wormhole.address %>",
    "<%= imports.wormhole.contracts.WormholeERC7412Receiver.address %>",
    [1, 13370],
    [1, 13370]
]
